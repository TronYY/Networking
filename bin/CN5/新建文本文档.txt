rdt1.0底层提供可靠传输
发送方和接收方状态图

java实现如下：
发送方
package com.ouc.tcp.test;

import com.ouc.tcp.client.TCP_Sender_ADT;
import com.ouc.tcp.message.*;
import com.ouc.tcp.tool.TCP_TOOL;

public class TCP_Sender extends TCP_Sender_ADT {
   
    privateTCP_PACKETtcpPack;   //待发送的TCP数据报
   
   
    publicTCP_Sender() {
      super();   //调用超类构造函数
      super.initTCP_Sender(this);   //初始化TCP发送端
    }
   
   @Override
   //可靠发送（应用层调用）：封装应用层数据，产生TCP数据报
    public voidrdt_send(int dataIndex, int[] appData) {
      
      //生成TCP数据报（设置序号和数据字段）
      tcpH.setTh_seq(dataIndex * appData.length + 1);
      tcpS.setData(appData);
       tcpPack =new TCP_PACKET(tcpH, tcpS, destinAddr);
      
      //发送TCP数据报
      udt_send(tcpPack);
      
      //等待ACK报文
      waitACK();
      
    }
   
   @Override
   //不可靠发送：将打包好的TCP数据报通过不可靠传输信道发送
    public voidudt_send(TCP_PACKET tcpPack) {
      
      //设置错误控制标志
      tcpH.setTh_eflag((byte)0);   //eFlag=0，信道无错误
      
      //发送数据报
      client.send(tcpPack);
      
    }
   
   @Override
   //等待期望的ACK报文
    public voidwaitACK() {
      //循环检查确认号对列中是否有新收到的ACK
       while(true){
         if(!ackQueue.isEmpty() && ackQueue.poll() ==tcpPack.getTcpH().getTh_seq()) {
             break;
          }
       }
    }

   @Override
   //接收到ACK报文：将确认号插入ack队列
    public voidrecv(TCP_PACKET recvPack) {
      ackQueue.add(recvPack.getTcpH().getTh_ack());
      System.out.println();
    }
   
}

接收方
package com.ouc.tcp.test;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import com.ouc.tcp.client.TCP_Receiver_ADT;
import com.ouc.tcp.message.*;
import com.ouc.tcp.tool.TCP_TOOL;

public class TCP_Receiver extends TCP_Receiver_ADT {
   
    privateTCP_PACKETackPack;   //回复的ACK报文段
   
   
    publicTCP_Receiver() {
      super();   //调用超类构造函数
      super.initTCP_Receiver(this);   //初始化TCP接收端
    }

   @Override
   //接收到数据报：设置回复的ACK报文段
    public voidrdt_recv(TCP_PACKET recvPack) {
      //生成ACK报文段（设置确认号）
      tcpH.setTh_ack(recvPack.getTcpH().getTh_seq());
       ackPack =new TCP_PACKET(tcpH, tcpS, recvPack.getSourceAddr());
      
      //回复ACK报文段
      reply(ackPack);
      
      //将接收到的正确有序的数据插入data队列，准备交付
      dataQueue.add(recvPack.getTcpS().getData());
      
      //交付数据（每20组数据交付一次）
      if(dataQueue.size() == 20) {
         deliver_data();
       }
      
      System.out.println();
    }

   @Override
   //交付数据（将接收到的正确有序的数据写入文件）
    public voiddeliver_data(){   
       File fw =new File( recvData.txt );
      BufferedWriter writer;
      
       try {
          writer = newBufferedWriter(new FileWriter(fw, true));
         
         //循环检查data队列中是否有新交付数据
         while(!dataQueue.isEmpty()) {
             int[] data =dataQueue.poll();
            
            //将数据写入文件
             for(int i =0; i < data.length; i++) {
               writer.write(data + );
             }
            
            writer.flush();      //清空输出缓存
          }
         
         writer.close();
       } catch(IOException e) {
          // TODOAuto-generated catch block
         e.printStackTrace();
       }
    }

   @Override
   //回复ACK报文段
    public voidreply(TCP_PACKET replyPack) {
      //设置错误控制标志
      tcpH.setTh_eflag((byte)0);   //eFlag=0，信道无错误
      
      //发送数据报
      client.send(replyPack);      
    }
   
}

rdt2.0允许比特差错
允许比特差错,

可以保证数据包不会丢失.

保证ACK,NAK包不会出现比特出错

即在rdt1.0的基础上增加了校验和进行校验，我们可用循环冗余crc对TCP报文段进行校验，要想达到2.1，2.2还需要对ACK包，NAK包进行校验
有限状态机定义如下：
发送方

接收方





package com.ouc.tcp.test;
import java.util.zip.CRC32;
import com.ouc.tcp.message.TCP_PACKET;
public class CheckSum{   
   
    publicstatic short computeChkSum(TCP_PACKET tcpPack) {
       intchecheckSum =0;   
       CRC32 crc32= newCRC32();      
      
      crc32.update(tcpPack.getTcpH().getTh_seq());
      crc32.update(tcpPack.getTcpH().getTh_ack());
    
       for (int i =0; i < tcpPack.getTcpS().getData().length;i++){    
         crc32.update(tcpPack.getTcpS().getData());         
       }
       checheckSum= (int) crc32.getValue();
       return(short) checheckSum;
   } 
}
rdt3.0停止等待协议
允许比特差错,包括ACK,NAK;

数据包还可能会丢失.

要求每个包都发送成功才会发下一个，若是出错，丢失，延迟，都会重发，需要在发送端设计时器。那么问题来了，假设我现在再0时刻发出去了A包，丢失了，没事，我再重发一遍，直到我收到正确的ACK为止，因为是停止等待协议嘛，每次只发一个包，可以等的。那么当我在0时刻发了A包，它延迟了，因为到t1超时了，我就要重传，在t2的时候我收到了A包的ACK，那么这个ACK是哪个包的呢？这样一来，我们就需要对发送的包进行分组，0101...这样分开，以为每次只发一个包，所以分成两组就足够啦。所以
有限自动机状态图如下:


rdt4.0滑动窗口协议
滑动窗口协议又分为回退N步协议（go-back-N）和选择响应协议（SelectResponse）
go-back-N是发送窗口大小为N，发送方每次将窗口内等待发送并可以发送的包发送出去，接收方每次只发送一个ACK包，当发送方收到接收方的ACK不是期待的（即包发生出错，延迟或丢失），则发送方发送当前窗口的所有的包。
SelectResponse则是发送方和接收的窗口都是N（可以不一样），接收方对手到无序的包进行缓存，并对每个包ACK，发送方只需重传出错、延迟、丢失的分组，提高了网络的吞吐量。
发送方的窗口为N，接收方的窗口为M，停等协议和滑动窗口协议之间关系：
当N=M=1，停止等待协议
当N>1,M=1,Go-back-N
当N>1,M>1，Select Response